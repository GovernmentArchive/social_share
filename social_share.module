<?php

/**
 * @file
 * Implements configurable social network share links to nodes
 */

/**
 * Implements hook_menu().
 */
function social_share_menu() {
  $items = array();
  $items['admin/config/content/social-share'] = array(
    'title'            => 'Social Share',
    'description'      => 'Configure share link styling.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('social_share_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'social_share.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_node_view().
 */
function social_share_node_view($node, $view_mode, $language) {
  // these three lines check to see if we can display the share box
  if (($view_mode == 'teaser' && variable_get('social_share_teaser', 1)) || ($view_mode == 'full')) {
    $enabledTypes = variable_get('social_share_node_types', array());
    if (isset($enabledTypes[$node->type]) && ($enabledTypes[$node->type])) {

      // get a list of enabled share links and generate them individually
      $sites = variable_get('social_share_sites', array());
      foreach ($sites as $site => $enabled) {
        if ($enabled) {
          $node->content['social_share'][] = _social_share_link($site, $node);
        }
      }
      $labels = variable_get('social_share_label', array('en' => t('Share to')));
      global $language;
      if (isset($labels[$language->language]) && strlen($labels[$language->language]) > 0) {
        $share_label = $labels[$language->language] .': ';
      }
      else {
        $share_label = '';
      }
      // put the shareBox into the node before it's rendered
      $node->content['social_share']['#prefix'] = '<div class="social-share clearfix"><span>'. $share_label .'</span>';
      $node->content['social_share']['#suffix'] = '</div>';
      $icon_setting = variable_get('social_share_icons', 'none');
      if ($icon_setting != 'none') {
        if ($icon_setting == '16' || $icon_setting == '32') {
          drupal_add_css(drupal_get_path('module', 'social_share') .'/icons/social-share-icons-'. $icon_setting .'.css');
        }
      }
    }
  }
}

function _social_share_link($site, $node) {
  // define the share links
  $sites['facebook'] = array(
    'name' => 'Facebook',
    'url'  => 'http://facebook.com/sharer.php?u=%URL%&t=%TITLE%'
  );
  $sites['twitter'] = array(
    'name' => 'Twitter',
    'url'  => 'http://twitter.com/intent/tweet?url=%URL%&text=%TITLE%'
  );
  $sites['googleplus'] = array(
    'name' => 'Google Plus',
    'url'  => 'https://plus.google.com/share?url=%URL%'
  );
  $sites['myspace'] = array(
    'name' => 'Myspace',
    'url' => 'http://www.myspace.com/Modules/PostTo/Pages/default.aspx?u=%URL%&c=%TITLE%'
  );
  $sites['msnlive'] = array(
    'name' => 'MSN Live',
    'url'  => 'http://profile.live.com/badge/?url=%URL%&title=%TITLE%&description=%DESC%'
  );
  $sites['yahoo'] = array(
    'name' => 'Yahoo',
    'url'  => 'http://bookmarks.yahoo.com/toolbar/savebm?opener=tb&u=%URL%&t=%TITLE%&d=%DESC%'
  );
  $sites['linkedin'] = array(
    'name' => 'LinkedIn',
    'url' => 'http://www.linkedin.com/shareArticle?url=%URL%&mini=true&title=%TITLE%&ro=false&summary=%DESC%&source='
  );
  $sites['orkut'] = array(
    'name' => 'Orkut',
    'url'  => 'http://promote.orkut.com/preview?nt=orkut.com&tt=%TITLE%&du=%URL%&cn=%DESC%'
  );
  $sites['digg'] = array(
    'name' => 'Digg',
    'url'  => 'http://digg.com/share?url=%URL%&title=%TITLE%'
  );
  $sites['delicious'] = array(
    'name' => 'Delicious',
    'url'  => 'http://www.delicious.com/save?v=5&noui&jump=close&url=%URL%&title=%TITLE%'
  );
  $sites['reddit'] = array(
    'name' => 'Reddit',
    'url'  => 'http://reddit.com/submit?url=%URL%&title=%TITLE%'
  );
  $sites['stumbleupon'] = array(
    'name' => 'StumbleUpon',
    'url'  => 'http://stumbleupon.com/submit?url=%URL%&title=%TITLE%'
  );
  $sites['hyves'] = array(
    'name' => 'Hyves',
    'url'  => 'http://www.hyves-share.nl/button/tip/?tipcategoryid=12&rating=5&title=%TITLE%&body=%DESC%Bron: [url=%URL%]%URL%[/url]'
  );

  // get the URL for the node, using path aliases if available
  $url = url('node/' . $node->nid, array('absolute' => true));

  // if the shorten_urls module is installed & enabled, shorten the url being shared.
  if (module_exists('shorten')) {
    $url = shorten_url($url);
  }

  // switch out placeholders with node information
  $maxDescLength = variable_get('social_share_max_desc_length', 50);
  $target = variable_get('social_share_target', 0);

  $placeholders = array(
    '%TITLE%',
    '%URL%',
    '%DESC%'
  );

  if (isset($node->nid)) {
    $body = field_get_items('node', $node, 'body');
    if (!empty($body) && $body[0]['format'] == 'php_code') {
      $body = $body[0]['value'];
    }
    else {
      $body = (!empty($body) && isset($body[0]['safe_value'])) ? $body[0]['safe_value'] : '';
    }
  }
  else {
    $body = '';
  }

  // Trim title so it will fit in a tweet.
  if ($site == 'twitter' && variable_get('social_share_twitter_truncate', 0)) {
    if ((strlen($url) + strlen($node->title)) > 140) {
      $length = 136 - strlen($url);
      $title  = substr($node->title, 0, $length);
      $title .= '...';
    }
  }

  if (!isset($title) || $title == '') {
    $title = $node->title;
  }

  $replacements = array(
    urlencode($title),
    $url,
    urlencode(strip_tags(strlen($body) > $maxDescLength ? substr($body, 0, $maxDescLength) .'...' : $body))
  );

  $options = array('attributes' => array('class' => 'social-share-'. $site));
  if (variable_get('social_share_new_window', 0)) {
    $options['attributes']['target'] = '_blank';
    $options['attributes']['title'] = $sites[$site]['name'];
  }

  $link = array(
    '#type'    => 'link',
    '#title'   => $sites[$site]['name'],
    '#href'    => str_replace($placeholders, $replacements, $sites[$site]['url']),
    '#options' => $options,
    '#suffix'  => '&nbsp;',
  );

  // Return the link
  return $link;
}

/**
 * Implements hook_block_info().
 */
function social_share_block_info() {
  $blocks = array();
  if (variable_get('social_share_block', 0)) {
    $blocks['social_share'] = array(
      'info'       => t('Social Share'),
      'visibility' => 1,
      'status'     => TRUE,
      'region'     => 'header',
      'weight'     => 0,
      'cache'      => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function social_share_block_view($delta = '') {
  // This example comes from node.module. Note that you can also return a
  // renderable array rather than rendered HTML for 'content'.
  $block = array();
  if (user_access('access content') && variable_get('social_share_block', 0)) {
    $block['subject'] = t('Social Share');
      $sites = variable_get('social_share_sites', array());
      $node = (object)node_load(arg(1));
      if (!isset($node->nid)) {
        $path = isset($_GET['q']) ? $_GET['q'] : '<front>';
        $node->link = url($path, array('absolute' => TRUE));
      }
      if (!isset($node->title)) {
        $node->title = variable_get('site_name', "");
      }
      foreach ($sites as $site => $enabled) {
        if ($enabled) {
          $block['content']['social_share'][] = _social_share_link($site, $node);
        }
      }
  }
  return $block;
}

/**
 * Implements hook_field_extra_fields().
 */
function social_share_field_extra_fields() {
  $items = array();
  $node_types = variable_get('social_share_node_types', array());
  foreach ($node_types as $type => $active) {
    if ($active) {
      $items['node'][$type]['display'] = array(
        'social_share'  => array(
          'label'       => t('Social Share'),
          'description' => t('Social Share Links'),
          'weight'      => 10,
        ),
      );
    }
  }

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter() for the node type form.
 */
function social_share_form_node_type_form_alter(&$form, &$form_state) {
  $form['social_share'] = array(
    '#type' => 'fieldset',
    '#title' => t('Social Share'),
    '#weight' => 8,
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
    '#attached' => array(
      'js' => array(
        'auto-nodetitle' => drupal_get_path('module', 'social_share') . '/social_share.js',
      ),
    ),
  );
  $form['social_share']['social_share_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Social Share'),
    '#description' => t('When checked, <em>Social Share</em> will be active for this node type (with settings as specified below)'),
    '#default_value' => variable_get('social_share_enabled_' . $form['#node_type']->type, 0),
  );

  $form['social_share']['wrapper'] = array(
    '#prefix' => '<div class="social-share-settings-wrapper">',
    '#suffix' => '</div>',
    '#tree'   => FALSE,
  );

  $replacements = variable_get('social_share_replacements_' . $form['#node_type']->type, array(
    '[node:title]',
    '[node:url:absolute]',
    '[node:body]',
    '',
  ));

  $form['social_share']['wrapper']['social_share_replacements'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Replacements'),
    '#description' => t('Specify the values to use for placeholders in the social share provider urls'),
    '#collapsible' => TRUE,
    '#collapsed'   => TRUE,
    '#tree'        => FALSE,
  );

  $form['social_share']['wrapper']['social_share_replacements']['social_share_title'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Title'),
    '#description'   => t('Select the value to use for the title when sharing nodes of this type.'),
    '#default_value' => variable_get('social_share_title_' . $form['#node_type']->type, '[node:title]'),
    '#required'      => TRUE,
  );

  $form['social_share']['wrapper']['social_share_replacements']['social_share_url'] = array(
    '#type'          => 'textfield',
    '#title'         => t('URL'),
    '#description'   => t('Select the value to use for the URL when sharing nodes of this type.'),
    '#default_value' => variable_get('social_share_url_' . $form['#node_type']->type, '[node:url:absolute]'),
    '#required'      => TRUE,
  );

  $form['social_share']['wrapper']['social_share_replacements']['social_share_description'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Description'),
    '#description'   => t('Select the value to use for the description when sharing nodes of this type. <br><strong>Note:</strong> Most social networks ignore this value.'),
    '#default_value' => variable_get('social_share_description_' . $form['#node_type']->type, '[node:body]'),
  );

  $form['social_share']['wrapper']['social_share_replacements']['social_share_image'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Image'),
    '#description'   => t('Select the value to use for the image when sharing nodes of this type. <br><strong>Note:</strong> Very few social networks accept this value, most automatically grab images from the page markup. Facebook, for example, uses og:image metatag values for image options.'),
    '#default_value' => variable_get('social_share_image_' . $form['#node_type']->type, ''),
  );

  $form['social_share']['wrapper']['social_share_replacements']['token_help'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('node'),
  );

  $networks = variable_get('social_share_networks_' . $form['#node_type']->type, array());

  $form['social_share']['wrapper']['social_share_networks'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Social Networks'),
    '#description' => t('Specify the social network(s) to enable for this node type.'),
    '#collapsible' => TRUE,
    '#collapsed'   => TRUE,
    '#tree'        => TRUE,
  );

  $available_networks = social_share_available_networks();
  foreach ($available_networks as $network) {
    $form['social_share']['wrapper']['social_share_networks'][$network['machine_name']] = array(
      '#type'  => 'checkbox',
      '#title' => $network['human_name'],
      '#default_value' => (in_array($network['machine_name'], $networks)) ? 1 : 0,
    );
  }
}

function social_share_available_networks() {
  return array(
    array('machine_name' => 'facebook', 'human_name' => 'Facebook'),
    array('machine_name' => 'twitter', 'human_name' => 'Twitter'),
    array('machine_name' => 'google_plus', 'human_name' => 'Google +'),
  );
}

/**
 * Implements hook_node_type_update().
 */
function social_share_node_type_update($info) {
  if (!empty($info->old_type) && $info->type != $info->old_type) {
    $settings = array(
      'social_share_enabled',
      'social_share_title',
      'social_share_url',
      'social_share_description',
      'social_share_image',
      'social_share_networks',
    );

    foreach ($settings as $setting) {
      if ($var = variable_get($setting .'_'. $info->old_type, NULL)) {
        variable_set($setting .'_'. $info->type, $var);
      }
      variable_del($setting .'_'. $info->old_type);
    }
  }
}

/**
 * Implements hook_node_type_delete().
 */
function social_share_node_type_delete($info) {
  $settings = array(
    'social_share_enabled',
    'social_share_title',
    'social_share_url',
    'social_share_description',
    'social_share_image',
    'social_share_networks',
  );

  foreach ($settings as $setting) {
    variable_del($setting .'_'. $info->type);
  }
}
